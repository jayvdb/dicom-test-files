import hashlib
import os


def test_files():
    """Returns a generator of file names and their info"""
    for root, directories, file_names in os.walk('./data'):
        for file_name in file_names:
            path = os.path.join(root, file_name)
            name = path.replace('./data/', '')
            hash = get_hash(path)
            # 'zstd' or 'none', which map to constructor function names
            if file_name.endswith('.zst'):
                compression = 'zstd'
                # remove extension to abstract compression away
                name = name[:-4]
            else:
                compression = 'none'
            yield (name, compression, hash)


def get_hash(path):
    """Returns the sha256 hash of a given path"""
    BUF_SIZE = 1024 * 4
    sha256 = hashlib.sha256()

    with open(path, 'rb') as f:
        while True:
            data = f.read(BUF_SIZE)
            if not data:
                return sha256.hexdigest()
            sha256.update(data)


class MultiGeneator:
    def __init__(self, *generators):
        self.generators = generators

    def add(self, name, hash):
        for generator in self.generators:
            generator.add(name, hash)

    def finish(self):
        for generator in self.generators:
            generator.finish()


def generate_rust(test_files):
    out_filename = './rust/src/entries.rs'
    with open(out_filename, 'w+') as f:
        # write generated file heading      
        f.writelines([
            '// THIS FILE IS GENERATED BY ./generate/generate.py\n',
            '// DO NOT MANUALLY EDIT THIS FILE\n\n',
            'use crate::test_file::TestFile;\n\n',

            '/// all test file entries\n',
            'pub static FILE_ENTRIES: &[TestFile] = &[\n',
        ])

        # save to list and sort by name
        test_files = list(test_files)
        test_files.sort(key=lambda x: x[0])

        # write each test file entry
        f.writelines(
            f'    TestFile::{compression}("{name}", "{hash}"),\n' for (name, compression, hash) in test_files
        )
        f.write('];\n')
        print(f'Generated {out_filename}')


def main():
    hashes = sorted(test_files())

    generate_rust(hashes)


if __name__ == '__main__':
    main()
